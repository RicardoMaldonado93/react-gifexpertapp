{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGif.js","components/GifExpertApp.js","index.js"],"names":["AddCategory","setCategory","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","items","document","querySelector","placeholder","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGif","key","GifExpertApp","categories","setCategories","ReactDOM","render","getElementById"],"mappings":"qMAGaA,EAAc,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,YAAiB,EAENC,mBAAS,YAFH,mBAEnCC,EAFmC,KAEvBC,EAFuB,KAe1C,OACI,0BAAMC,SAXW,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,SACVP,GAAY,SAACQ,GAAD,OAAYN,GAAZ,mBAA2BM,OACvCL,EAAc,IACdM,SAASC,cAAc,SAASC,YAAc,0BAM9C,2BACIC,KAAK,OACLC,MAAOX,EACPY,SAhBc,SAAC,GAAD,IAAEC,EAAF,EAAEA,OAAF,OAAcZ,EAAcY,EAAOF,Y,uBCOlDG,EAdF,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACNC,EADM,iDAC0CC,UAAUH,GADpD,+DAEOI,MAAOF,GAFd,cAENG,EAFM,gBAGWA,EAAKC,OAHhB,uBAGJC,EAHI,EAGJA,KACFC,EAAOD,EAAKE,KAAK,SAAAC,GAAG,YACrB,CACGC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAR9B,kBAWLM,GAXK,4CAAH,sDCGAO,EAAc,SAAC,GAAuB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEtC,OACI,yBAAKc,UAAU,0CACZ,yBAAKC,IAAKf,EAAKgB,IAAMN,IACrB,2BAAIA,KCJFO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECDZ,SAAEA,GAAe,IAAD,EACbhB,mBAAS,CAC/BuB,KAAM,GACNa,SAAS,IAH0B,mBAChCC,EADgC,KACzBC,EADyB,KAoBvC,OAfAC,qBAAW,WACPxB,EAASC,GACJwB,MACG,SAAAC,GAEIH,EAAS,CACLf,KAAKkB,EACLL,SAAQ,SAK1B,CAAEpB,IAGGqB,EDlB0BK,CAAa1B,GAAjCa,EADsB,EAC3BN,KAAaa,EADc,EACdA,QAErB,OACI,oCACI,wBAAIJ,UAAU,qCAAd,MAAuDhB,EAAvD,OACEoB,GAAW,uBAAGJ,UAAU,oCAAb,eACb,yBAAKA,UAAU,+CAEPH,EAAOJ,KAAK,SAAAC,GAAG,OACf,kBAAC,EAAD,iBACQA,EADR,CAEIiB,IAAKjB,EAAIC,YEmBlBiB,EA/BM,WAAI,MAEe5C,mBAAS,CAAC,cAFzB,mBAEd6C,EAFc,KAEFC,EAFE,KASrB,OACI,oCACI,4CACA,kBAAC,EAAD,CAAa/C,YAAc+C,IAC3B,6BAEA,4BAEQD,EAAWpB,KAAK,SAAAT,GAAQ,OACpB,kBAAC,EAAD,CACIA,SAAUA,EACV2B,IAAK3B,U,MCnBjC+B,IAASC,OACP,kBAAC,EAAD,MACAxC,SAASyC,eAAe,U","file":"static/js/main.68775b2c.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategory}) => {\r\n    \r\n    const [inputValue, setInputValue] = useState('One Puch');\r\n\r\n    const handleInputChange = ({target}) => setInputValue(target.value); \r\n    const handleSubmit = (e)=>{ \r\n        e.preventDefault(); \r\n\r\n        if(inputValue.trim()){\r\n            setCategory((items)=>[  inputValue, ...items ]);\r\n            setInputValue(\"\");\r\n            document.querySelector(\"input\").placeholder = \"ingrese categoria...\"\r\n        }\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input \r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={ handleInputChange }\r\n            />\r\n        </form>\r\n    )\r\n\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategory: PropTypes.func.isRequired\r\n}\r\n\r\n","const getGifs = async ( category )=>{\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=vKfwJNhSL2NuLAAq5oJC4RLvtQPCY9FT`;\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n    const gifs = data.map( img => \r\n        ({\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }))\r\n    \r\n    return gifs;\r\n}\r\n\r\nexport default getGifs;","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const GifGridItem = ( { id, title, url } )=>{\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n           <img src={url} alt={ title }/>\r\n           <p>{title}</p>\r\n        </div>\r\n    )\r\n    \r\n}\r\n\r\nGifGridItem.propTypes = {\r\n    id: PropTypes.string.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    url: PropTypes.string.isRequired,\r\n}\r\n","import React from 'react'\r\nimport { useFetchGif } from '../hooks/useFetchGif';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n    const { data:images, loading } = useFetchGif( category );\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\"> ~ { category } ~ </h3>\r\n            { loading && <p className=\"animate__animated animate__flash\">cargando...</p> }\r\n            <div className=\"card-grid animate__animated animate__fadeIn\">\r\n                {         \r\n                    images.map( img =>\r\n                    <GifGridItem \r\n                        {...img}\r\n                        key={img.id}\r\n                    />  \r\n                    )\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect } from 'react'\r\nimport getGifs from '../helpers/getGifs'\r\n\r\nexport const useFetchGif = ( category ) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    })\r\n    useEffect( ()=>{ \r\n        getGifs( category )\r\n            .then( \r\n                imgs =>{\r\n           \r\n                    setState({\r\n                        data:imgs,\r\n                        loading:false\r\n                    })\r\n                 \r\n                }\r\n            );\r\n    },[ category ]);\r\n\r\n\r\n    return state;\r\n}\r\n","import React, { useState } from 'react'\r\nimport { AddCategory } from './AddCategory';\r\nimport { GifGrid } from './GifGrid';\r\n\r\nconst GifExpertApp = ()=>{\r\n    //const categories = [\"One Punch\", \"Samurai X\", \"Dragon Ball\"];\r\n    const [categories, setCategories] = useState([\"One Punch\"])\r\n\r\n    // const handleAdd = ()=>{\r\n    //     let anime = \"Heroe Academy\";\r\n    //     setCategories([...categories, anime]);\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategory={ setCategories }/>\r\n            <hr />\r\n\r\n            <ol>\r\n                {\r\n                    categories.map( category =>\r\n                        <GifGrid \r\n                            category={category}\r\n                            key={category}\r\n                        />\r\n                    )\r\n                }\r\n\r\n            </ol>\r\n            \r\n        </>\r\n    );\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './components/GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n//* GifExpertApp\n//"],"sourceRoot":""}